(*#-#-#-#-#-#-#-#-#-#---Declaration---#-#-#-#-#-#-#-#-#-#-#-#-#*)
// Tokenizes a given math expression into a stream of tokens.
// The return value signifies whether tokenization was successful,
// or during tokenization an invalid expression was encountered.
// Please note, during tokenization not all error cases are checked.
{attribute 'qualified_only'}
FUNCTION FuTokenizeExpression : BOOL
VAR_INPUT
    sExpression: STRING(255);                 // The expression string to tokenize
END_VAR
VAR_OUTPUT
    typExpression: typTokenizedExpression;    // The tokenized expression
END_VAR
{library PRIVATE}
VAR
    i: UINT;
    j: UINT;
    
    tempChar: BYTE;
    tempNextChar: BYTE;
    
    tempFunEndDetected: BOOL;
END_VAR
VAR // Data used throughout each loop iteration
    tempIndex: UINT;
    
    tempIdentifierStr: STRING(5);
    tempPtrByte: POINTER TO BYTE;
    
    tempVarOpen: BOOL;
    
    tempGroupOpen: INT := 0;
    tempGroupNum: UINT := 50;
    
    tempFunOpen: BOOL;
    tempFunIndex: UINT;
    tempFunArgsCount: UINT;
    
    tempNumOpen: BOOL;
    tempNumSign: BOOL; // TRUE = negative
    
    tempValueStr: STRING(80);
END_VAR
(*#-#-#-#-#-#-#-#-#-#---Implementation---#-#-#-#-#-#-#-#-#-#-#-#-#*)
IF sExpression = '' THEN
    RETURN;
END_IF

// Assert a clean string (CODESYS does not assert that the whole string contains NUL bytes, only sets the first byte as NUL byte!)
// tempValueStr is VAR_TEMP and should get completely initialized as an empty string (all bytes = NUL), but the truth is the memory space
// gets reused and thus leftovers from the previous execution can be left there, since only the first byte is set to NUL
// (which is described by CODESYS as "new initialization", which is technically wrong!)
FOR i := 0 TO SIZEOF(tempValueStr) BY 1 DO
    tempValueStr[i] := 0;
END_FOR

FOR i := 0 TO 255 BY 1 DO
    IF sExpression[i] = 0 OR_ELSE tempIndex > ParameterList.uiMaxExpressionTokens THEN
        EXIT;
    END_IF
    
    tempIdentifierStr := '';
    tempPtrByte := 0;
    
    tempChar := sExpression[i];
    
    CASE tempChar OF
        Constants.CHAR_WHITESPACE, Constants.CHAR_NEWLINE, Constants.CHAR_CAR_RETURN:
            IF tempNumOpen THEN
                typExpression.atTokens[tempIndex].eType := eTokenType.NUMBER;
                typExpression.atTokens[tempIndex].lrValue := STRING_TO_LREAL(tempValueStr);
                
                tempValueStr := '';
                tempNumOpen := FALSE;
            ELSIF tempVarOpen THEN
                typExpression.atTokens[tempIndex].eType := eTokenType.VARIABLE;
                typExpression.atTokens[tempIndex].lrValue := STRING_TO_LREAL(tempValueStr);
                
                tempValueStr := '';
                tempVarOpen := FALSE;
            ELSE
                CONTINUE; // Ignore whitespace, newline (\n) and carriage return (\r)
            END_IF
        
        Constants.CHAR_VARIABLE:
            IF tempVarOpen OR_ELSE tempNumOpen THEN
                RETURN;
            END_IF
            
            tempVarOpen := TRUE;
            tempValueStr := '';
            
            CONTINUE;
        
        Constants.CHAR_GROUP_START:
            tempGroupOpen := tempGroupOpen + 1;
            tempGroupNum := tempGroupNum - 1;
            
            typExpression.atTokens[tempIndex].eType := eTokenType.GROUP_START;
            typExpression.atTokens[tempIndex].uiGroupNumber := tempGroupNum;
        
        Constants.CHAR_GROUP_END:
            tempFunEndDetected := (tempFunOpen AND_THEN tempGroupNum = typExpression.atTokens[tempFunIndex].uiGroupNumber);
            
            IF tempVarOpen THEN
                typExpression.atTokens[tempIndex].eType := eTokenType.VARIABLE;
                typExpression.atTokens[tempIndex].lrValue := STRING_TO_LREAL(tempValueStr);
                
                tempValueStr := '';
                tempVarOpen := FALSE;
                
                tempIndex := tempIndex + 1;
                typExpression.uiCountTokens := tempIndex;
                
                IF tempFunEndDetected THEN
                    tempFunArgsCount := tempFunArgsCount + 1;
                END_IF
            ELSIF tempNumOpen THEN
                typExpression.atTokens[tempIndex].eType := eTokenType.NUMBER;
                typExpression.atTokens[tempIndex].lrValue := STRING_TO_LREAL(tempValueStr);
                
                tempValueStr := '';
                tempNumOpen := FALSE;
                
                tempIndex := tempIndex + 1;
                typExpression.uiCountTokens := tempIndex;
                
                IF tempFunEndDetected THEN
                    tempFunArgsCount := tempFunArgsCount + 1;
                END_IF
            END_IF
            
            typExpression.atTokens[tempIndex].eType := SEL(tempFunEndDetected, eTokenType.GROUP_END, eTokenType.FUNCTION_CALL_END);
            typExpression.atTokens[tempIndex].uiGroupNumber := tempGroupNum;
            tempGroupNum := tempGroupNum + 1;
            
            IF tempFunEndDetected THEN
                // Assert for variable args functions, we have at least that many arguments,
                // or for fixed args functions, we have that many arguments as currently stored
                IF typExpression.atTokens[tempFunIndex].xArgsVariable THEN
                    IF typExpression.atTokens[tempFunIndex].uiArgsCount > tempFunArgsCount THEN
                        RETURN;
                    END_IF
                ELSIF typExpression.atTokens[tempFunIndex].uiArgsCount <> tempFunArgsCount THEN
                    RETURN;
                END_IF
                
                IF tempFunArgsCount > Constants.MAX_FUN_ARGS THEN
                    RETURN;
                END_IF
                
                typExpression.atTokens[tempFunIndex].uiArgsCount := tempFunArgsCount;
                
                tempFunOpen := FALSE;
                tempFunArgsCount := 0;
            ELSE
                tempGroupOpen := tempGroupOpen - 1;
            END_IF
        
        Constants.CHAR_COMMA:
            IF NOT tempFunOpen THEN
                RETURN;
            ELSIF tempVarOpen THEN
                typExpression.atTokens[tempIndex].eType := eTokenType.VARIABLE;
                typExpression.atTokens[tempIndex].lrValue := STRING_TO_LREAL(tempValueStr);
                
                tempValueStr := '';
                tempVarOpen := FALSE;
                
                tempIndex := tempIndex + 1;
                typExpression.uiCountTokens := tempIndex;
            ELSIF tempNumOpen THEN
                typExpression.atTokens[tempIndex].eType := eTokenType.NUMBER;
                typExpression.atTokens[tempIndex].lrValue := STRING_TO_LREAL(tempValueStr);
                
                tempValueStr := '';
                tempNumOpen := FALSE;
                
                tempIndex := tempIndex + 1;
                typExpression.uiCountTokens := tempIndex;
            END_IF
            
            tempFunArgsCount := tempFunArgsCount + 1;
            CONTINUE;
        
        Constants.CHAR_DOT:
            IF NOT tempNumOpen THEN
                RETURN;
            END_IF
            
            tempValueStr := Standard.CONCAT(tempValueStr, '.');
            CONTINUE;
        
        // "-" must be handled differently, as we may need to handle it as a sign
       Constants. CHAR_ADD, Constants.CHAR_SUB, Constants.CHAR_MUL,
        Constants.CHAR_DIV, Constants.CHAR_EXP, Constants.CHAR_MOD:
            IF tempVarOpen THEN
                typExpression.atTokens[tempIndex].eType := eTokenType.VARIABLE;
                typExpression.atTokens[tempIndex].lrValue := STRING_TO_LREAL(tempValueStr);
                
                tempValueStr := '';
                tempVarOpen := FALSE;
                
                tempIndex := tempIndex + 1;
                typExpression.uiCountTokens := tempIndex;
            ELSIF tempNumOpen THEN
                typExpression.atTokens[tempIndex].eType := eTokenType.NUMBER;
                typExpression.atTokens[tempIndex].lrValue := STRING_TO_LREAL(tempValueStr);
                
                tempValueStr := '';
                tempNumOpen := FALSE;
                
                tempIndex := tempIndex + 1;
                typExpression.uiCountTokens := tempIndex;
            END_IF
            
            // If operator is ADD/SUB, then peek ahead to see if a number follows immediately (it's a negative number and not an operation)
            tempNextChar := sExpression[(i + 1)];
            IF
                (tempChar = Constants.CHAR_ADD OR_ELSE tempChar = Constants.CHAR_SUB) AND_THEN
                tempNextChar >= Constants.ASCII_NUM_START AND_THEN
                tempNextChar <= Constants.ASCII_NUM_END
            THEN
                tempNumOpen := TRUE;
                tempValueStr := SEL(tempChar = Constants.CHAR_ADD, '-', '');
                
                CONTINUE;
            END_IF
            
            typExpression.atTokens[tempIndex].eType := eTokenType.MATH_OP;
            typExpression.atTokens[tempIndex].sIdentifier := Util.WORD_AS_STRING(tempChar, TRUE);
    ELSE
        IF tempChar >= Constants.ASCII_NUM_START AND_THEN tempChar <= Constants.ASCII_NUM_END THEN
            IF NOT tempVarOpen AND_THEN NOT tempNumOpen THEN
                tempNumOpen := TRUE;
                tempValueStr := '';
            END_IF
            
            tempValueStr := Standard.CONCAT(tempValueStr, TO_STRING((tempChar - Constants.ASCII_NUM_START)));
            CONTINUE;
        ELSIF tempChar >= Constants.ASCII_ALPHA_START AND_THEN tempChar <= Constants.ASCII_ALPHA_END THEN
            // We can not call a function inside a function
            IF tempFunOpen THEN
                RETURN;
            END_IF
            
            FOR j := i TO (i + 5) BY 1 DO
                IF sExpression[j] = Constants.CHAR_GROUP_START THEN
                    EXIT;
                END_IF
                
                tempIdentifierStr[(j - i)] := sExpression[j];
                
                // Assert string is correctly NUL terminated (prevent "MAXIN" when first "LIMIT" and then "MAX" was tokenized)
                tempIdentifierStr[(j - i + 1)] := 0;
            END_FOR
            
            i := j - 1;
            
            IF
                tempIdentifierStr = Constants.FUN_ABS OR_ELSE
                tempIdentifierStr = Constants.FUN_ACOS OR_ELSE
                tempIdentifierStr = Constants.FUN_ASIN OR_ELSE
                tempIdentifierStr = Constants.FUN_ATAN OR_ELSE
                tempIdentifierStr = Constants.FUN_CEIL OR_ELSE
                tempIdentifierStr = Constants.FUN_COS OR_ELSE
                tempIdentifierStr = Constants.FUN_DEG OR_ELSE
                tempIdentifierStr = Constants.FUN_FLOOR OR_ELSE
                tempIdentifierStr = Constants.FUN_LOG OR_ELSE
                tempIdentifierStr = Constants.FUN_LN OR_ELSE
                tempIdentifierStr = Constants.FUN_RAD OR_ELSE
                tempIdentifierStr = Constants.FUN_ROUND OR_ELSE
                tempIdentifierStr = Constants.FUN_SIN OR_ELSE
                tempIdentifierStr = Constants.FUN_SQRT OR_ELSE
                tempIdentifierStr = Constants.FUN_TAN
            THEN
                // Single arg functions
                typExpression.atTokens[tempIndex].uiArgsCount := 1;
            ELSIF
                tempIdentifierStr = Constants.FUN_TRUNC
            THEN
                // Dual arg functions
                typExpression.atTokens[tempIndex].uiArgsCount := 2;
            ELSIF
                tempIdentifierStr = Constants.FUN_LIMIT
            THEN
                // Triple arg functions
                typExpression.atTokens[tempIndex].uiArgsCount := 3;
            ELSIF
                tempIdentifierStr = Constants.FUN_AVGA OR_ELSE
                tempIdentifierStr = Constants.FUN_MAX OR_ELSE
                tempIdentifierStr = Constants.FUN_MIN
            THEN
                // Variable arg functions (at least 2)
                typExpression.atTokens[tempIndex].uiArgsCount := 2;
                typExpression.atTokens[tempIndex].xArgsVariable := TRUE;
            ELSE
                // Invalid function name
                RETURN;
            END_IF
            
            // Peek at the next expression token and check if it's a GROUP_START token
            IF sExpression[(i + 1)] <> Constants.CHAR_GROUP_START THEN
                // If not, invalid expression
                RETURN;
            END_IF
            
            // Skip next token, as we've already consumed it
            i := i + 1;
            
            tempFunIndex := tempIndex;
            tempGroupNum := tempGroupNum - 1;
            
            typExpression.atTokens[tempIndex].eType := eTokenType.FUNCTION_CALL;
            typExpression.atTokens[tempIndex].sIdentifier := tempIdentifierStr;
            typExpression.atTokens[tempIndex].uiGroupNumber := tempGroupNum;
            
            tempFunOpen := TRUE;
            tempFunArgsCount := 0;
        ELSE
            // Invalid expression
            RETURN;
        END_IF
    END_CASE
    
    tempIndex := tempIndex + 1;
    typExpression.uiCountTokens := tempIndex;
END_FOR

// If var or num open, close it and append as token
IF tempVarOpen THEN
    typExpression.atTokens[tempIndex].eType := eTokenType.VARIABLE;
    typExpression.atTokens[tempIndex].lrValue := STRING_TO_LREAL(tempValueStr);
    
    tempIndex := tempIndex + 1;
ELSIF tempNumOpen THEN
    typExpression.atTokens[tempIndex].eType := eTokenType.NUMBER;
    typExpression.atTokens[tempIndex].lrValue := STRING_TO_LREAL(tempValueStr);
    
    tempIndex := tempIndex + 1;
END_IF

typExpression.uiCountTokens := tempIndex;
FuTokenizeExpression := (tempIndex > 0 AND_THEN NOT tempVarOpen AND_THEN tempGroupOpen = 0 AND_THEN NOT tempFunOpen);
